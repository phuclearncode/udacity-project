name: Frontend Continuous Deployment

on:
  workflow_run:
    workflows:
      - CICD Pipeline for Backend
    types:
      - completed
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - name: Install dependencies
        run: cd starter/frontend && npm ci
      - name: Lint code
        run: cd starter/frontend && npm run lint

  Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - name: Install dependencies
        run: cd starter/frontend && npm ci
      - name: Run tests
        run: cd starter/frontend && npm test

  BuildAndPushImage:
    needs: [Lint, Test]
    runs-on: ubuntu-latest
    environment: AWS Credential
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4

        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Retrieve Backend External IP
        id: get-ip
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1
          echo "REACT_URL=http://$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" > $GITHUB_ENV
          echo "REACT_URL=$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
          REACT: ${{ env.REACT_URL }}
        run: |
          echo "Backend URL: $REACT"
          cd starter/frontend
          docker build --build-arg REACT_APP_MOVIE_API_URL=$REACT -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  Deploy:
    needs: [BuildAndPushImage]
    runs-on: ubuntu-latest
    environment: AWS Credential
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Deploy Docker Image to Amazon EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/frontend/k8s
          aws eks update-kubeconfig --name cluster --region us-east-1
          kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kustomize build . | kubectl apply -f -

